#include "mhwrapper.h"
#include "../../v20/src/pager.h"
#include "di_envdef.h"
#include "ricohpaper.h"
#include "device.h"
#include "omstub.h" 

struct {
	OMenum size;
	OMenum stat;
} sizestat_tbl[] = {
	{ PAPERSIZE_LONGLTR, TRAYINSERTED_IN },
	{ PAPERSIZE_A4,      TRAYINSERTED_IN },

	{ PAPERSIZE_LETTER, TRAYINSERTED_IN },
	{ PAPERSIZE_A4R,    TRAYINSERTED_IN },
};
bool paper_setted = FALSE;
di_onetrayinfo_t	*pTray = NULL;

#if defined(EMPCL5) || defined(EMPCLXL) 
int mnSetPaperInfo()
{
    simhandle_t *hsim;
    int ret;
#ifdef PJL_JOB_START_END
	/*int pagerange = PrintSysQueryPageRange(pPDIstatePCL->pageCount);*/
    int pagerange, retenv;
    varvalue_t val;
    retenv = _var_getbyname(hsim, "GPS_PENV_VAR_ID_QTY", &val);
    pagerange = val.u.id_value;
#endif
	if (!paper_setted) {
#ifdef PRINT_QUALITY_MODE
		Sint32 r_media = GetMediaType();
		/*OMenum r_qmode = PDIgetqualitymode();*/
		/*OMenum r_qmode = 917   *mode = normal, referred from di_envdef.h GetQualityMode();*/
        retenv = _var_getbyname(hsim, "GPS_PENV_VAR_ID_QUALITYMODE", &val); 
        OMenum r_qmode = val.u.id_value;
#endif
#if 0 /* <<Disabling Inseter tray for now>>*/
#ifdef SUPPORT_INSERTER 
    if (PDIGetInserterTray() != INSERTER_NOTSELECT)
{
        PDIsetpaper(mnMediaSizeSelectionForInserter(PDIRgetpapercode(pPDIstatePCL)));
        return(0);
}
#endif
#endif/* <<Inseter tray>>*/

#ifdef PJL_JOB_START_END
    if(pagerange == 0 || pagerange == 999)/*hardcoded DISCARDRANGE and PAGEOUTRANGE */
        return(0);
#endif
#ifdef DEBUG
/*	DBGPRINTF(DBGBIOS, 16, "mnSetPaperInfo: === set the paper information ===\n"); */
#endif
		paper_setted = TRUE;

#ifdef PRINT_QUALITY_MODE
		ret = 1;/*PrintSysCheckQualityMode(&r_media, &r_qmode);*/
		if (ret & CHANGE_MEDIATYPE) {
			/*PDIsetmedia(r_media);*/
			SetMediaType(r_media);
		}
		if (ret & CHANGE_QUALITYMODE) {
			/*PDIsetqualitymode(r_qmode);* quality mode is available in PMS structure which will be updated from GPS as part of boot up*/
		}
#endif
/*
		if(!CheckSamePaperSize() || PDIRgetpapersource(pPDIstatePCL) != LastPaperSource || PDImediatype != LastMediaType){ Replaced PDI calls*/
        if(!CheckSamePaperSize() || GetPaperSource() != LastPaperSource || r_media != LastMediaType){
			LastPaperSize = GetPageSize();/*PDIRgetpapercode(pPDIstatePCL);*/
			LastPaperSource = GetPaperSource();/*PDIRgetpapersource(pPDIstatePCL);*/
			LastMediaType = r_media;
			/*PDIsetpaper(mnMediaSizeSelection(GetPageSize()));*/
                    /*(PDIRgetpapercode(pPDIstatePCL)));*/
		    SetPageSize(mnMediaSizeSelection(GetPageSize()));
			LastPaperSelect = GetPageSize();/*PDIRgetpapercode(pPDIstatePCL);*/
		}
		else {
			if(LastPaperSelect == 0xFFFF)
				LastPaperSelect = mnMediaSizeSelection(GetPageSize());/*(PDIRgetpapercode(pPDIstatePCL));*/
			/*PDIsetpaper(LastPaperSelect);*/
            SetPageSize(LastPaperSelect);
		}
		/*Recalc();*/
		return 1;
	} else 
		return 0;
}
#endif defined(EMPCL5) || defined(EMPCLXL)

bool CheckSamePaperSize()
 {
	/*if(PDIRgetpapercode(pPDIstatePCL) != LastPaperSize)*/
     if(GetPageSize() != LastPaperSize)
		return FALSE;
#ifdef PCL5_CUSTOMSIZE_COMMAND
	else if((GetPageSize() == PAPERSIZE_CUSTOM) && (!CheckSameCustomSize()))/*(PDIRgetpapercode(pPDIstatePCL)==PAPERSIZE_CUSTOM)&&!CheckSameCustomSize())*/ 
	{
		return FALSE;
	}
#endif
	 return TRUE;
 }
 
bool CheckSameCustomSize()
{
#if 0 /*disabling custom paper for now*/

	long CurrentWidth,CurrentLength,p_max_width,p_max_height;
	CurrentWidth = GetCustomPageWidth();
	CurrentLength = GetCustomPageHeight();
	/*if ((PDIcustomwidth <= 0) || (PDIcustomheight <= 0))*/ /* check the difference between PDIcustomwidth and currentwidth*/
	if (( CurrentWidth <= 0) || ( CurrentLength <= 0))
			return FALSE;
	else
	{
		/*CurrentWidth = (long)((float)PDIcustomwidth * 254 / 720 + 0.5);
		CurrentLength = (long)((float)PDIcustomheight * 254 / 720 + 0.5);*/
		CurrentWidth = (long)((float)CurrentWidth * 254 / 720 + 0.5);
		CurrentLength = (long)((float)CurrentLength * 254 / 720 + 0.5);
		PrintSysGetMaxPaperSize(&p_max_width, &p_max_height);
		
		if (p_max_width && (CurrentWidth > p_max_width)) {
			CurrentWidth = p_max_width;
		}
		if (p_max_height && (CurrentLength > p_max_height)) {
			CurrentLength = p_max_height;
		}
		
		if(CurrentWidth !=PrintSysGetCustomWidth()||CurrentLength !=PrintSysGetCustomLength())
			return FALSE;
	}
#endif /*disabling custom for now */
	return TRUE;
}
/* #endif */

#if defined(EMPCL5) || defined(EMPCLXL) 
OMenum mnMediaSizeSelection(OMenum paper)
{
	int papersize = 0;

	PrintSysSetCompulsionPaperSize(_enum_EOT);
	PrintSysSetCompulsionInTray(_enum_EOT);

#ifdef SYS_CHECK_DIRECTION
	/*if ( PrintSysCheckNonRotation( paper, PDI1.orient, PDI1res.x, PDI1res.y ) ) {
		return mnNonRotateDirection( PDI1.orient, paper, PDI1res.x, PDI1res.y );
	}*/
	if ( PrintSysCheckNonRotation( paper, GetOrientation(), XRESOLUTION, YRESOLUTION ) ) {
		return mnNonRotateDirection( GetOrientation(), paper, XRESOLUTION, YRESOLUTION );
	}
#endif /* SYS_CHECK_DIRECTION */

#ifdef PCL_PREVIEW
	if( PrintSysGetPrintCondition_JobType() == DI_PCND_SDK_THUMBNAILJOB ){
		papersize = mnSelectionByPreview(paper, XRESOLUTION, YRESOLUTION );/*PDI1res.x, PDI1res.y);*/
		return papersize;		
	}
#endif /* PCL_PREVIEW */

	/*if(PDIRgetpapersource(pPDIstatePCL) == PAPERSRC_ALL){*/
	 if(GetPaperSource() == PAPERSRC_ALL){
		papersize = mnSelectionByAutoPaperSource(paper, XRESOLUTION, YRESOLUTION );/*PDI1res.x, PDI1res.y);*/
	}else{
		papersize = mnSelectionByChoosePaperSource(paper, XRESOLUTION, YRESOLUTION );/*PDI1res.x, PDI1res.y);*/
	}

/*	DBGPRINTF1(DBGBIOS, 16,
		"mnMediaSizeSelection: return paper size %d\n", papersize); */

	return papersize;
}
#endif /* defined(EMPCL5) || defined(EMPCLXL) */

#ifdef SUPPORT_INSERTER
OMenum mnMediaSizeSelectionForInserter(OMenum paper)
{
    OMenum longEdge, shortEdge;
    bool longSupport, shortSupport;

    PRpaperPair(paper, XRESOLUTION, YRESOLUTION, &longEdge, &shortEdge);

    longSupport = PrintSysGetPaperInfo(longEdge);
    shortSupport = PrintSysGetPaperInfo(shortEdge);

    if (longSupport && shortSupport) {
	if (PrintSysInserterMatchPaperSize()) {
	    return longEdge;
	} else {
	    return shortEdge;
	}
    } else if (longSupport) {
	return longEdge;
    } else if (shortSupport) {
	return shortEdge;
    }
    return longEdge;
}
#endif /*SUPPORT_INSERTER*/

#ifdef SYS_CHECK_DIRECTION
OMenum mnNonRotateDirection( ORIENTATION orient, OMenum papersize, int xres, int yres )
{
	OMenum paper, longEdge, shortEdge;
    Bool ORportrait, ORrevport;
	ORportrait = 0;
	ORrevport = 1;
	PRpaperPair ( papersize, xres, yres, &longEdge, &shortEdge );

	if ( longEdge != 0 && shortEdge != 0 ) {
		if ( orient == ORportrait || orient == ORrevport ) {
			paper = shortEdge;
		} else {
			paper = longEdge;
		}
	} else if ( longEdge != 0 ) {
		paper = longEdge;
	} else if ( shortEdge != 0 ) {
		paper = shortEdge;
	} else {
        printf("mnNonRotationDirection() : longEdge & shorEdge not Found\n");
		/*DBGPANIC("mnNonRotationDirection() : longEdge & shorEdge not Found\n");
		DBGFATAL();*/
	}

	return paper;
}
#endif /* SYS_CHECK_DIRECTION */

#ifdef PCL_PREVIEW
OMenum mnSelectionByPreview(OMenum paper, int xres, int yres)
{
	long	p_width, p_height;
	long	width, height;
	long	p_max_width, p_max_height;
	OMenum longEdge, shortEdge;
	Boolean longSupport, shortSupport;
    int customwidth, customheight;
	customwidth = GetCustomPageWidth();
	customheight = GetCustomPageHeight();
	
	if( paper == PAPERSIZE_CUSTOM ){
		if (customwidth <= 0)
		{
			customwidth = 6120;
		}
		if (customheight <= 0)
		{
			customheight = 7920;
		}
		width = (long)((float)customwidth * xres / 720 + 0.5);
		height = (long)((float)customheight * yres / 720 + 0.5);

		p_width = (long)((float)customwidth * 254 / 720 + 0.5);
		p_height = (long)((float)customheight * 254 / 720 + 0.5);

		PrintSysGetMaxPaperSize(&p_max_width, &p_max_height);
		
		if (p_max_width && (p_width > p_max_width)) {
			p_width = p_max_width;
			width = (long)((float)p_width * xres / 254 + 0.5);
		}
		if (p_max_height && (p_height > p_max_height)) {
			p_height = p_max_height;
			height = (long)((float)p_height * yres / 254 + 0.5);
		}

		PrintSysSetCustomSize(p_width, p_height, xres, yres);

		PRcustompaperinfo(width, height, xres, yres);
	}
	else{
		/*PRpaperPair(paper, PDI1res.x, PDI1res.y, &longEdge, &shortEdge);*/
		PRpaperPair(paper, XRESOLUTION, YRESOLUTION, &longEdge, &shortEdge);

		longSupport = PrintSysGetPaperInfo(longEdge);
		shortSupport = PrintSysGetPaperInfo(shortEdge);

		if (longSupport) {
			return longEdge;
		} else if (shortSupport) {
			return shortEdge;
		}
		else {
			PrintSysSetJobCancel( TRUE );
			LOGMPRINTF2(0x905, "[%s]0905 %d,Preview size not support %d\n", PDLNAME, paper);
		}
	}

	return paper;
}
#endif

#if defined(EMPCL5) || defined(EMPCLXL)
OMenum mnSelectionByAutoPaperSource(OMenum papersize, int xres, int yres)
{
	OMenum paper, longEdge, shortEdge;
	Sint32 le_tray = NSEARCH_PATH, se_tray = NSEARCH_PATH, auto_cont;
	Boolean se_pe_tray = FALSE, le_pe_tray = FALSE;
#if BYPASS_FREE_FEED == 2
	OMenum bypass_mode;
#endif

	PRpaperPair ( papersize, xres, yres, &longEdge, &shortEdge );
/*	DBGPRINTF1(DBGBIOS, 16,
		"mnSelectionByAutoPaperSource: found shortEdge %d\n", shortEdge);
	DBGPRINTF1(DBGBIOS, 16,
		"mnSelectionByAutoPaperSource: found longEdge %d\n", longEdge);
*/
	/* check short edge feed tray */
	se_tray = searchBestPaperSource(shortEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_IN);*/
#ifdef DEBUG
	if (se_tray < NSEARCH_PATH) {
	/*	DBGPRINTF1(DBGBIOS, 16,
			"mnSelectionByAutoPaperSource: found short edge besttray %d\n", se_tray); */
	}
#endif

	if (se_tray == NSEARCH_PATH) {
		se_tray = searchBestPaperSource(shortEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_INEMPTY);*/
		se_pe_tray = (se_tray != NSEARCH_PATH);
#ifdef DEBUG
		if (se_tray < NSEARCH_PATH) {
		/*	DBGPRINTF1(DBGBIOS, 16,
				"mnSelectionByAutoPaperSource: found short edge bettertray %d\n", se_tray); */
		}
#endif
	}

	/* check long edge feed tray */
	if (longEdge) {
		le_tray = searchBestPaperSource(longEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_IN);*/
#ifdef DEBUG
		if (le_tray < NSEARCH_PATH) {
/*		DBGPRINTF1(DBGBIOS, 16,
				"mnSelectionByAutoPaperSource: found long edge besttray %d\n", le_tray); */
		}
#endif

		if (le_tray == NSEARCH_PATH) {
			le_tray = searchBestPaperSource(longEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_INEMPTY);*/
			le_pe_tray = (le_tray != NSEARCH_PATH);
#ifdef DEBUG
			if (le_tray < NSEARCH_PATH) {
		/*		DBGPRINTF1(DBGBIOS, 16,
					"mnSelectionByAutoPaperSource: found long edge bettertray %d\n", le_tray); */
			}
#endif
		}

	}


	if( ((se_tray != NSEARCH_PATH) && !se_pe_tray)
		|| ((le_tray != NSEARCH_PATH) && !le_pe_tray) ) {
		if( se_pe_tray )
			se_tray = NSEARCH_PATH;;
		if( le_pe_tray )
			le_tray = NSEARCH_PATH;
	}

	if( (se_tray == NSEARCH_PATH) && (le_tray == NSEARCH_PATH) ) {
		/* No much ALL tray */
		paper = papersize;
		choosePaperDirection(&paper,longEdge,shortEdge); 	
		if( paper == PAPERSIZE_CUSTOM ) {
			/* for Custom paper size */
#ifdef PCL5e_CUSTOM_BUGFIX
           PAPERINFO  custom_paperinfo;
			OMenum tray;

			/*PrintSysPaperRequest(&paper, 0, 0,
								 PDImediatype, PDIRgetpapersource(pPDIstatePCL), FALSE);*/
			PrintSysPaperRequest(&paper, 0, 0,
								 GetMediaType(), GetPaperSource(), FALSE);

			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);

			if( (PCLJOB) && !PrintSysGetJobCancel() ){
				tray = searchBestPaperSource(PAPERSIZE_CUSTOM, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype,
						TRAYINSERTED_IN);*/
				if ( tray == NSEARCH_PATH )
					tray = searchBestPaperSource(PAPERSIZE_CUSTOM, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype,
							TRAYINSERTED_INEMPTY);*/
                 SetPaperSource(tray);
#ifdef PCL5_CUSTOMSIZE_COMMAND  /*check for omsource once */
				mnGetCustomSize( (tray == NSEARCH_PATH
					? OMGetDefaultEnum(OMPAPERSRC, OMSYSTEM)
					: search_path[tray].om_source),
					xres, yres, &custom_paperinfo );
#else
				PrintSysGetCustomSize( (tray == NSEARCH_PATH
					? OMGetDefaultEnum(OMPAPERSRC, OMSYSTEM)
					: search_path[tray].om_source),
					xres, yres, &custom_paperinfo );
#endif
			}
#else
			PAPERINFO  custom_paperinfo; 
			OMenum priority_tray;
			Sint32 p_width, p_length;

			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);

			/*if( PDIRgetinterpreter(pPDIstatePCL) == PDI_PCL ) {*/
            if(PCLJOB)
            {
				priority_tray = OMGetDefaultEnum(OMPAPERSRC, OMSYSTEM);
#ifdef PCL5_CUSTOMSIZE_COMMAND
				mnGetCustomSize( priority_tray, xres, yres, &custom_paperinfo );
#else
				PrintSysGetCustomSize( priority_tray, xres, yres, &custom_paperinfo );
#endif
			}

			p_width = custom_paperinfo.size * 254 / xres;
			p_length = custom_paperinfo.size * 254 / yres;;

			PrintSysPaperRequest(&paper, p_width, p_length,
			                      GetMediaType(), GetPaperSource(), FALSE);   
								 /*PDImediatype, PDIRgetpapersource(pPDIstatePCL), FALSE);*/

#endif
		} else if (PrintSysPaperRequest(&paper, 0, 0, GetMediaType(), GetPaperSource(), FALSE) == 0){
		/*PDImediatype, PDIRgetpapersource(pPDIstatePCL), FALSE) == 0) {*/
			PAPERINFO  ResultPaperinfo;
			Boolean LEFfound, SEFfound;

			ResultPaperinfo.size = PRpaperinfo(paper, xres, yres);
			SEFfound = FALSE;/*LongEdgeLeading(&ResultPaperinfo)*/;/*PDIlongedgeleading(&ResultPaperinfo) ? FALSE : TRUE; */
			LEFfound = SEFfound ? FALSE : TRUE;

		/*	PrintSysChoosePaperDirectionOnStaplePunch(&LEFfound, &SEFfound, GetOrientation());
													  *PDI1.orient);*/
		}
	} else {
		/* found much tray */
#if BYPASS_FREE_FEED == 2
			bypass_mode = OMGetCurrentEnum(OMBYPASSTRAYSETTING, OMSYSTEM);
			if ((bypass_mode == BYPASSTRAYSETTING_FREEMODE) && (papersize != PAPERSIZE_CUSTOM) && (search_path[se_tray].om_source == PAPERSRC_BYPASS) && (search_path[le_tray].om_source == PAPERSRC_BYPASS))
			{
				if (PrintSysIsDirectionSEF())
					paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
				else
					paper = (PrintSysGetPaperInfo(longEdge)) ? longEdge : shortEdge;
			}
			else {
		paper = checkFinisherPrint( papersize, le_tray, se_tray, GetOrientation(), xres, yres );
		if (paper != shortEdge && paper != longEdge)
			paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
			}
#else
		paper = checkFinisherPrint( papersize, le_tray, se_tray, GetOrientation(), xres, yres );
#ifdef BYPASS_FREE_FEED
		if (paper != shortEdge && paper != longEdge)
			paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
#endif
#endif
	}
	
	return paper;
}
#endif  /* defined(EMPCL5) || defined(EMPCLXL) */

Sint32 searchBestPaperSource(OMenum code, OMenum mediatype, OMenum insert)
{
    bool bypass_traylock = FALSE;
	Sint32 best_tray;
	OMenum paper, stat, lock, media, priority_tray, frontcover_tray;
#ifdef BYPASS_FREE_FEED
	OMenum bypass_mode;
#ifdef IOTESTPFLAG
	extern TESTPMODE testprintmode;
#endif
	
	/*Get bypass tray setting */
	bypass_mode = OMGetCurrentEnum(OMBYPASSTRAYSETTING, OMSYSTEM);
#endif

	/* Get priority tray*/
	priority_tray = OMGetDefaultEnum(OMPAPERSRC, OMSYSTEM);

	/* Get front cover tray (for front cover print*/
/*	if( OMGetCurrentEnum(OMFRONTCOVERPRINT, OMSYSTEM) == FRONTCOVERPRINT_OFF ) {
		frontcover_tray = FRONTCOVERPRINTTRAY_NONE; *front cover print off*
	} else {
		frontcover_tray = OMGetCurrentEnum(OMFRONTCOVERPRINTTRAY, OMSYSTEM);
	}*/

	for (best_tray = 0; best_tray < NSEARCH_PATH; best_tray++) {
		if ( priority_tray == search_path[best_tray].om_source ) {
			lock = OMGetCurrentEnum(search_path[best_tray].om_lock, OMPRINTER);
			if(bypass_traylock){
				if ((lock == TRAYLOCKED_LOCKED)&& (search_path[best_tray].om_source!=PAPERSRC_BYPASS)) 
				break;
#ifdef BYPASS_FREE_FEED
				else if ((search_path[best_tray].om_source == PAPERSRC_BYPASS) 
						&& (bypass_mode != BYPASSTRAYSETTING_FREEMODE && 
							bypass_mode != BYPASSTRAYSETTING_CUSTOMFREEMODE )) break;
#else
				else if (search_path[best_tray].om_source == PAPERSRC_BYPASS) break;
#endif
			}
 			else{
				if ( lock == TRAYLOCKED_LOCKED ) break;
			}
				/* Priority tray was locked */
			if ( frontcover_tray == search_path[best_tray].om_frontcovertray ) break;
				/* Priority tray is front cover tray */
			paper = OMGetCurrentEnum(search_path[best_tray].om_size, OMPRINTER);
			media = OMGetCurrentEnum(search_path[best_tray].om_mediatype, OMPRINTER);
			stat = OMGetCurrentEnum(search_path[best_tray].om_stat, OMPRINTER);
#ifdef BYPASS_FREE_FEED
			if (search_path[best_tray].om_source == PAPERSRC_BYPASS
				 && insert == stat
#ifdef IOTESTPFLAG
				 && testprintmode == TESTPMODE_NORMAL
#endif
				 ) {
				if (bypass_mode == BYPASSTRAYSETTING_FREEMODE)
					return best_tray;
				if (bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE)
					if (code == PAPERSIZE_CUSTOM)
						return best_tray;
					else
						break;
			}
#endif
			if( mediatype == MEDIATYPE_AUTO ) {
				if (code == paper && insert == stat &&
					((media == MEDIATYPE_PLAIN) || (media == MEDIATYPE_RECYCLED) || (media == MEDIATYPE_PLAIN2)) )
					return best_tray;
			} else {
				if (code == paper && insert == stat && mediatype == media)
				return best_tray;
			}
			break;	/* Priority tray no match */
		}
	}

	for (best_tray = 0; best_tray < NSEARCH_PATH; best_tray++) {
		lock = 0;/*OMGetCurrentEnum(search_path[best_tray].om_lock, OMPRINTER);*/
		if(bypass_traylock){
			if ((lock == TRAYLOCKED_LOCKED)&&(search_path[best_tray].om_source!=PAPERSRC_BYPASS)) 
			{continue;}
#ifdef BYPASS_FREE_FEED
			else if ((search_path[best_tray].om_source == PAPERSRC_BYPASS) 
					&& (bypass_mode != BYPASSTRAYSETTING_FREEMODE && 
						bypass_mode != BYPASSTRAYSETTING_CUSTOMFREEMODE )) continue;
#else
            else if (search_path[best_tray].om_source == PAPERSRC_BYPASS) continue;
#endif
		}
		else{
			if (lock == TRAYLOCKED_LOCKED) {continue;}
		}
			/* locked tray skip */
		if ( frontcover_tray == search_path[best_tray].om_frontcovertray ) {continue;}
			/* Priority tray is front cover tray */
		paper = OMGetCurrentEnum(search_path[best_tray].om_size, OMPRINTER);
		media = OMGetCurrentEnum(search_path[best_tray].om_mediatype, OMPRINTER);
		stat = OMGetCurrentEnum(search_path[best_tray].om_stat, OMPRINTER);
#ifdef BYPASS_FREE_FEED
		if (search_path[best_tray].om_source == PAPERSRC_BYPASS
			 && insert == stat
#ifdef IOTESTPFLAG
			 && testprintmode == TESTPMODE_NORMAL
#endif
			 ) {
			if (bypass_mode == BYPASSTRAYSETTING_FREEMODE)
				return best_tray;
			if (bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE)
				if (code == PAPERSIZE_CUSTOM)
					return best_tray;
				else
					continue;
		}
#endif
		if( mediatype == MEDIATYPE_AUTO ) {
			if (code == paper && insert == stat &&
				((media == MEDIATYPE_PLAIN) || (media == MEDIATYPE_RECYCLED) || (media == MEDIATYPE_PLAIN2)) )
				break;
		} else {
			if (code == paper && insert == stat && mediatype == media)
			break;
		}
	}
	return best_tray;
}

void choosePaperDirection(Sint32 *psize, OMenum longEdgePaper,
			 OMenum shortEdgePaper)
{
	bool LEFfound = TRUE, SEFfound = TRUE; 
	if((*psize == PAPERSIZE_CUSTOM) || (!PrintSysGetPaperInfo(longEdgePaper)))
     {
	 /*|| ((OMGetCurrentEnum(OMSTAPLE,OMSYSTEM) == STAPLE_OFF) &&
	(OMGetCurrentEnum(OMPUNCH,OMSYSTEM) == PUNCH_OFF)))*/ 
		return;
	}
/*	PrintSysChoosePaperDirectionOnStaplePunch(&LEFfound, &SEFfound,
						  GetOrientation());*/
	ChoosePaperDirectionDone = 0;
	if(!SEFfound){
	*psize = longEdgePaper;
	}
} 
/* #endif defined(EMPCL5) || defined(EMPCLXL)*/

#ifdef PCL5_CUSTOMSIZE_COMMAND
void mnGetCustomSize(OMenum tray, int xres, int yres, PAPERINFO *paper)
{
	long	p_width, p_height;
	long	width, height;
	long	p_max_width, p_max_height;
	
	if ((GetCustomPageWidth() <= 0) || (GetCustomPageHeight() <= 0))
		PrintSysGetCustomSize(tray, xres, yres, paper);
	else {
		width = (long)((float)GetCustomPageWidth() * xres / 720 + 0.5);
		height = (long)((float)GetCustomPageHeight * yres / 720 + 0.5);

		p_width = (long)((float)GetCustomPageWidth() * 254 / 720 + 0.5);
		p_height = (long)((float)GetCustomPageHeight() * 254 / 720 + 0.5);

		PrintSysGetMaxPaperSize(&p_max_width, &p_max_height);
		
		if (p_max_width && (p_width > p_max_width)) {
			p_width = p_max_width;
			width = (long)((float)p_width * xres / 254 + 0.5);
		}
		if (p_max_height && (p_height > p_max_height)) {
			p_height = p_max_height;
			height = (long)((float)p_height * yres / 254 + 0.5);
		}

		PrintSysSetCustomSize(p_width, p_height, xres, yres);

		PRcustompaperinfo(width, height, xres, yres);
	}
}
#endif

/*#if defined(EMPCL5) || defined(EMPCLXL)  */
OMenum checkFinisherPrint(OMenum papersize, Sint32 longEdgeTray, Sint32 shortEdgeTray, ORIENTATION orient, int xres, int yres)
{
	PAPERINFO  custom_paperinfo;
	OMenum paper, priority_tray;
	Boolean SEFfound, LEFfound;
#ifdef BYPASS_FREE_FEED
	OMenum bypass_mode;

	/* Get bypass tray setting*/
	bypass_mode = OMGetCurrentEnum(OMBYPASSTRAYSETTING, OMSYSTEM);
#endif
/*
#ifdef STAPLE_PUNCH_CONTROLED_BY_PDL
	ReflectOptionCondition(&longEdgeTray, &shortEdgeTray, orient);
#endif
*/
	SEFfound = ( shortEdgeTray != NSEARCH_PATH ) ? TRUE : FALSE;
	LEFfound = ( longEdgeTray != NSEARCH_PATH ) ? TRUE : FALSE;
#ifdef SYS_CHECK_DIRECTION
	if ( papersize != PAPERSIZE_CUSTOM )
#endif
/*	PrintSysChoosePaperDirectionOnStaplePunch( &LEFfound, &SEFfound, orient );
	shortEdgeTray = SEFfound ? shortEdgeTray : NSEARCH_PATH;
	longEdgeTray = LEFfound ? longEdgeTray : NSEARCH_PATH;*/

	/* Get priority tray*/
	priority_tray = OMGetDefaultEnum(OMPAPERSRC, OMSYSTEM);

	if ( longEdgeTray != NSEARCH_PATH && shortEdgeTray != NSEARCH_PATH ) {
		/* found ShortEdge & LongEdge */
		Sint32 shortPathTray;

		if (priority_tray == search_path[shortEdgeTray].om_source)
			shortPathTray = shortEdgeTray;
		else
			shortPathTray = longEdgeTray;

#ifdef BYPASS_FREE_FEED
		if ((papersize == PAPERSIZE_CUSTOM) &&
			 search_path[shortPathTray].om_source == PAPERSRC_BYPASS &&
			 (bypass_mode == BYPASSTRAYSETTING_FREEMODE ||
			 bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE))
			paper = papersize;
		else
#endif
		paper = OMGetCurrentEnum(search_path[shortPathTray].om_size, OMPRINTER);

		/* Get custom Papersize */
		if( (paper == PAPERSIZE_CUSTOM) && (PCLJOB) ) {
			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);
#ifdef PCL5_CUSTOMSIZE_COMMAND
			mnGetCustomSize( search_path[shortPathTray].om_source,
				xres, yres, &custom_paperinfo );
#else
			PrintSysGetCustomSize( search_path[shortPathTray].om_source,
				xres, yres, &custom_paperinfo );
#endif
		}

		return paper;

	} else if ( longEdgeTray != NSEARCH_PATH ) {
		/* Only LongEdge found */
#ifdef BYPASS_FREE_FEED
		if ((papersize == PAPERSIZE_CUSTOM) &&
			 search_path[longEdgeTray].om_source == PAPERSRC_BYPASS &&
			 (bypass_mode == BYPASSTRAYSETTING_FREEMODE ||
			 bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE))
			paper = papersize;
		else
#endif
		paper = OMGetCurrentEnum(search_path[longEdgeTray].om_size, OMPRINTER);

		/* Get custom Papersize */
		if( (paper == PAPERSIZE_CUSTOM) && (PCLJOB) ) {
			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);
#ifdef PCL5_CUSTOMSIZE_COMMAND
			mnGetCustomSize( search_path[longEdgeTray].om_source,
				xres, yres, &custom_paperinfo );
#else
			PrintSysGetCustomSize( search_path[longEdgeTray].om_source,
				xres, yres, &custom_paperinfo );
#endif
		}

		return paper;

	} else if ( shortEdgeTray != NSEARCH_PATH ) {
		/* Only ShortEdge was found */
#ifdef BYPASS_FREE_FEED
		if ((papersize == PAPERSIZE_CUSTOM) &&
			 search_path[shortEdgeTray].om_source == PAPERSRC_BYPASS &&
			 (bypass_mode == BYPASSTRAYSETTING_FREEMODE ||
			 bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE))
			paper = papersize;
		else
#endif
		paper = OMGetCurrentEnum(search_path[shortEdgeTray].om_size, OMPRINTER);

		/* Get custom Papersize */
		if( (paper == PAPERSIZE_CUSTOM) && (PCLJOB) ) {
			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);
#ifdef PCL5_CUSTOMSIZE_COMMAND
			mnGetCustomSize( search_path[shortEdgeTray].om_source,
				xres, yres, &custom_paperinfo );
#else
			PrintSysGetCustomSize( search_path[shortEdgeTray].om_source,
				xres, yres, &custom_paperinfo );
#endif
		}

		return paper;

	}
#ifdef NOUSE_ALL_NOMATCH_CASE
	 else {	/*( longEdgeTray == NSEARCH_PATH && shortEdgeTray == NSEARCH_PATH )*/

		OMenum longEdge, shortEdge;
		PRpaperPair ( papersize, xres, yres, &longEdge, &shortEdge );

		/* Get custom Papersize */
		if( (papersize == PAPERSIZE_CUSTOM) && (PCLJOB) ) {
			custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);
#ifdef PCL5_CUSTOMSIZE_COMMAND
			mnGetCustomSize( ((GetPaperSource() == PAPERSRC_ALL) ? priority_tray : (OMenum)GetPaperSource() ),
				xres, yres, &custom_paperinfo );
#else
			PrintSysGetCustomSize( ((GetPaperSource() == PAPERSRC_ALL) ? priority_tray : (OMenum)GetPaperSource() ),
				xres, yres, &custom_paperinfo );
#endif
		}

		/* return default value */
		if ( longEdge != 0 ) {	/* "longEdge == 0" is not supported Long edge feed paper size*/
			return longEdge;
		}
        paper = papersize;
		return papersize;
	}
#endif /* NOTUSE_ALL_NOMATCH_CASE */
     return paper;
}

OMenum mnSelectionByChoosePaperSource(OMenum papersize, int xres, int yres)
{
	OMenum paper, mediatype, longEdge, shortEdge;
#ifdef BYPASS_FREE_FEED
	OMenum bypass_mode;
#endif
	Sint32 tray;
	Sint32 p_width, p_length;
#if TRAY_OVERWRITING >= 2
	Sint32 hdwpsize;
#endif
    paper = GetPaperSource();
	tray = searchChoosePaperSource(paper);/*PDIRgetpapersource(pPDIstatePCL));*/

	paper = OMGetCurrentEnum(search_path[tray].om_size, OMPRINTER);
/*#if TRAY_OVERWRITING >= 2
	hdwpsize = mnOMtoHdwPaperSize(paper);
#endif*/
	mediatype = OMGetCurrentEnum(search_path[tray].om_mediatype, OMPRINTER);

#ifdef EN_LIMITLESS_FEED
	if(OMGetCurrentBool(OMAUTOTRAYCHANGE2, OMSYSTEM)) {    
		/*PDImediatype = mediatype;*/
		SetMediaType(mediatype);
	}
#endif

	PRpaperPair ( papersize, xres, yres, &longEdge, &shortEdge );

/*	DBGPRINTF1(DBGBIOS, 16,
		"mnSelectionByChoosePaperSource: found short edge %d\n", shortEdge);
	DBGPRINTF1(DBGBIOS, 16,
		"mnSelectionByChoosePaperSource: found long edge %d\n", longEdge);
*/
#ifdef BYPASS_FREE_FEED
	bypass_mode = OMGetCurrentEnum(OMBYPASSTRAYSETTING, OMSYSTEM);
#if BYPASS_FREE_FEED == 2
	if( !((bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE && search_path[tray].om_source == PAPERSRC_BYPASS) || (bypass_mode == BYPASSTRAYSETTING_FREEMODE && search_path[tray].om_source == PAPERSRC_BYPASS))) {
#else
	if (!(bypass_mode == BYPASSTRAYSETTING_CUSTOMFREEMODE && search_path[tray].om_source == PAPERSRC_BYPASS)) {
#endif
#endif
	if( shortEdge == paper ) {
		paper = checkFinisherPrint( papersize, (Sint32)NSEARCH_PATH, tray, GetOrientation(), xres, yres);/*PDI1.orient, xres, yres );*/
		return paper;
	}

	if( longEdge && longEdge == paper ) {
		paper = checkFinisherPrint( papersize, tray, (Sint32)NSEARCH_PATH, GetOrientation(), xres, yres);/*PDI1.orient, xres, yres );*/
		return paper;
    }
#ifdef BYPASS_FREE_FEED
	}
#endif

	/* No much paper size */
	paper = papersize;

	if( paper == PAPERSIZE_CUSTOM ) {
		/* for Custom paper size */
		PAPERINFO  custom_paperinfo;

		custom_paperinfo.size = PRpaperinfo(PAPERSIZE_CUSTOM, xres, yres);
/*commenting for now */
		/*if( PDIRgetinterpreter(pPDIstatePCL) == PDI_PCL ) {
#ifdef PCL5_CUSTOMSIZE_COMMAND
			mnGetCustomSize( PDIRgetpapersource(pPDIstatePCL), xres, yres, &custom_paperinfo );
#else
			PrintSysGetCustomSize( PDIRgetpapersource(pPDIstatePCL), xres, yres, &custom_paperinfo );
#endif
		}*/

		p_width = custom_paperinfo.size * 254 / xres;
		p_length = custom_paperinfo.size * 254 / yres;;
	} else {
		p_width = 0;
		p_length = 0;
	}

	/* specially procces for bypass tray */
	/*if(PDIRgetpapersource(pPDIstatePCL) == PAPERSRC_BYPASS) {*/
	if(GetPaperSource() == PAPERSRC_BYPASS) {
#if BYPASS_FREE_FEED == 2
		if (bypass_mode == BYPASSTRAYSETTING_FREEMODE) {
			if (PrintSysIsDirectionSEF())
				return (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
			else
				return (PrintSysGetPaperInfo(longEdge)) ? longEdge : shortEdge;
			} else
#endif
		paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
/*#if TRAY_OVERWRITING >= 2
		if(!PrintSysIsDirectionoverwritingInvalid() && hdwpsize < DI_CODE_NO_SIZE)
			paper = (PrintSysGetPaperInfo(longEdge)) ? longEdge : shortEdge;
#endif*/
		return paper;
	} 
/*
#ifdef TRAY_OVERWRITING
	if (OMGetCurrentEnum(search_path[tray].om_traysetting, OMSYSTEM) == TRAYSETTING_COMMAND)
			return (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
#endif
*/
/*#ifdef EN_LIMITLESS_FEED
	if(OMGetCurrentBool(OMAUTOTRAYCHANGE2, OMSYSTEM) || 
	    (OMGetCurrentEnum(OMTRAYSEARCHMODE, OMSYSTEM) == TRAYSEARCHMODE_SWITCH)) {
#else*/
	if(OMGetCurrentEnum(OMTRAYSEARCHMODE, OMSYSTEM) == TRAYSEARCHMODE_SWITCH) {
/*#endif*/
		Sint32 le_tray = NSEARCH_PATH, se_tray = NSEARCH_PATH;
		Boolean se_pe_tray = FALSE, le_pe_tray = FALSE; 
		
		/* check short edge feed tray */
		se_tray = searchBestPaperSource(shortEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_IN); */
		
		if (se_tray == NSEARCH_PATH) {
			se_tray = searchBestPaperSource(shortEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_INEMPTY);*/
			se_pe_tray = (se_tray != NSEARCH_PATH);
		} 
		
		/* check long edge feed tray */
		if (longEdge) {
			le_tray = searchBestPaperSource(longEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_IN);*/
			
			if (le_tray == NSEARCH_PATH) {
				le_tray = searchBestPaperSource(longEdge, GetMediaType(), TRAYINSERTED_IN);/*PDImediatype, TRAYINSERTED_INEMPTY);*/
				le_pe_tray = (le_tray != NSEARCH_PATH);
			} 
		} 
		
		if(((se_tray != NSEARCH_PATH) && !se_pe_tray)
				|| ((le_tray != NSEARCH_PATH) && !le_pe_tray)) {
			if(se_pe_tray)
				se_tray = NSEARCH_PATH;;
			if(le_pe_tray)
				le_tray = NSEARCH_PATH;
		} 
		
#ifdef BYPASS_FREE_FEED
		if((se_tray != NSEARCH_PATH) || (le_tray != NSEARCH_PATH)) {
#if BYPASS_FREE_FEED == 2
			if ((bypass_mode == BYPASSTRAYSETTING_FREEMODE) && (papersize != PAPERSIZE_CUSTOM) && (search_path[se_tray].om_source == PAPERSRC_BYPASS) && (search_path[le_tray].om_source == PAPERSRC_BYPASS))
			{
				if (PrintSysIsDirectionSEF())
					paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
				else
					paper = (PrintSysGetPaperInfo(longEdge)) ? longEdge : shortEdge;
			}
			else {
			paper = checkFinisherPrint(papersize, le_tray, se_tray, GetOrientation(), xres, yres);/*PDI1.orient, xres, yres);*/
			if (paper != shortEdge && paper != longEdge)
				paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
			return paper;
			}
#else
			paper = checkFinisherPrint(papersize, le_tray, se_tray, GetOrientation(), xres, yres);/*PDI1.orient, xres, yres);*/
			if (paper != shortEdge && paper != longEdge)
				paper = (PrintSysGetPaperInfo(shortEdge)) ? shortEdge : longEdge;
			return paper;
#endif
		}
#else
		if((se_tray != NSEARCH_PATH) || (le_tray != NSEARCH_PATH))
			return (checkFinisherPrint(papersize, le_tray, se_tray, GetOrientation(), xres, yres));/*PDI1.orient, xres, yres);*/
#endif
	}

	choosePaperDirection(&paper,longEdge,shortEdge); 	
	if (paper == PAPERSIZE_CUSTOM)
		PrintSysPaperRequest(&paper, p_width, p_length, GetMediaType(), GetPaperSource(), FALSE);
							 /*PDImediatype, PDIRgetpapersource(pPDIstatePCL), FALSE);*/
	else if (PrintSysPaperRequest(&paper, 0, 0, GetMediaType(), GetPaperSource(), FALSE) == 0)
	/*PDImediatype, PDIRgetpapersource(pPDIstatePCL),
								  FALSE) == 0) */{
								  
		PAPERINFO  ResultPaperinfo;
		Boolean LEFfound, SEFfound;

		ResultPaperinfo.size = PRpaperinfo(paper, xres, yres);
		SEFfound = FALSE;/*PDIlongedgeleading(&ResultPaperinfo) ? FALSE : TRUE;*/
		LEFfound = SEFfound ? FALSE : TRUE;

		/*PrintSysChoosePaperDirectionOnStaplePunch(&LEFfound, &SEFfound, GetOrientaion());*/
												  /*PDI1.orient);*/
	}
    
	return paper;
}
/*#endif*/ /* defined(EMPCL5) || defined(EMPCLXL) */

#if defined(EMPCL5) || defined(EMPCLXL) 
OMenum mnGetOMPaperSize(Sint32 code, int xres, int yres, int (*comp)())
{
    PAPERINFO * primary;

    /* get the 1st paper information into paper table */
    primary = (PAPERINFO *)PRpaperfirst(code, xres, yres, comp);
    if (primary == (PAPERINFO *)NULL)
        return (OMenum)0;               /* illeagal paper code */

  /*  DBGPRINTF1(DBGBIOS, 16,
        "mnGetOMPaperSize: found OM paper code %d\n", primary->OMcode); */

    return primary->OMcode;
}
#endif /* defined(EMPCL5) || defined(EMPCLXL) */

Sint32 searchChoosePaperSource(OMenum tray_code)
{
	Sint32 choose_tray;
	OMenum om_code;

	for (choose_tray = 0; choose_tray < NSEARCH_PATH; choose_tray++) {
		om_code = search_path[choose_tray].om_source;
		if ( om_code == tray_code )
			break;
	}
    SetPaperSource(choose_tray);
	return choose_tray;

}
